
CS-50 Course 
---------------------------------------------------------------------



Binary number - 0,1

1 byte = 8 bits

ASCII code is used to represent characters.

Unicode is used to represent emojis.

Algorithm- step by step instructions to solve a problem.

Boolean expression - Yes or NO / True or False.

------------------------------------------------------

Week -1

C language


header file - used to have access to library.

ex- <stdio.h> - standard inpu output.

To check library functions, visit- manual.cs50.io

----------------------------------------------------------
Few Linux Commands
cd	Change directory	cd /home/user/Documents
ls	List files in current directory	ls -l or ls /home/user/Downloads
mkdir	Create a new directory	mkdir new_folder
mv	Move or rename a file or directory	mv oldname.txt newname.txt
rm	Delete a file	rm file.txt
rmdir	Delete an empty directory	rmdir empty_folder

--------------------------------------------------

Data types in 	C

int	Integer numbers	4 bytes
char	Character data (ASCII)	1 byte
float	Single-precision floating point	4 bytes
double	Double-precision floating point	8 bytes

----------------------------------------------------
Format specifiers

Specifier	Description &  Used With
%d	Signed decimal integer,	int
%i	Signed decimal integer (same as %d),	int
%u	Unsigned decimal integer, unsigned int
%f	Decimal floating point (standard notation),  float, double
%lf	Double precision floating point,  double (in scanf)
%c	Single character,	char
%s	String of characters,	char[] or char*
%p	Pointer address, 	void*

----------------------------------------------------------
Operators in C

1.Arithmetic
operator	Description	Example
+		Addition	a + b
-		Subtraction	a - b
*		Multiplication	a * b
/		Division	a / b
%		Modulus (remainder)	a % b

2.Relational

| Operator | Description              | Example  |
| -------- | ------------------------ | -------- |
| `==`     | Equal to                 | `a == b` |
| `!=`     | Not equal to             | `a != b` |
| `>`      | Greater than             | `a > b`  |
| `<`      | Less than                | `a < b`  |
| `>=`     | Greater than or equal to | `a >= b` |
| `<=`     | Less than or equal to    | `a <= b` |

3. Logical

Operator	Description	Example
&&		Logical AND	(a > 0 && b > 0)
		
!		Logical NOT	!(a > 0)

4.Assignment Operators-
| Operator | Description         | Example                        |
| -------- | ------------------- | ------------------------------ |
| `=`      | Assign value        | `a = 10`                       |
| `+=`     | Add and assign      | `a += 5` (same as `a = a + 5`) |
| `-=`     | Subtract and assign | `a -= 5`                       |
| `*=`     | Multiply and assign | `a *= 2`                       |
| `/=`     | Divide and assign   | `a /= 3`                       |
| `%=`     | Modulus and assign  | `a %= 2`                       |


5.Increment/Decrement

| Operator | Description    | Example        |
| -------- | -------------- | -------------- |
| `++`     | Increment by 1 | `a++` or `++a` |
| `--`     | Decrement by 1 | `a--` or `--a` |


6.Bitwise

| Operator | Description | Example    |     |     |
| -------- | ----------- | ---------- | --- | --- |
| `&`      | Bitwise AND | `a & b`    |     |     |
| \`       | \`          | Bitwise OR | \`a | b\` |
| `^`      | Bitwise XOR | `a ^ b`    |     |     |
| `~`      | Bitwise NOT | `~a`       |     |     |
| `<<`     | Left shift  | `a << 1`   |     |     |
| `>>`     | Right shift | `a >> 1`   |     |     |

7.Special Operator

| Operator | Description                         | Example         |
| -------- | ----------------------------------- | --------------- |
| `sizeof` | Returns size of a data type         | `sizeof(int)`   |
| `&`      | Address of a variable               | `&a`            |
| `*`      | Pointer dereference                 | `*ptr`          |
| `->`     | Access structure member via pointer | `ptr->member`   |
| `.`      | Access structure member             | `struct.member` |


----------------------------------------------------------

Use ctrl C to terminate a program if bymistake we use infinite loop.


Integer overflow occurs when an arithmetic operation tries to create a numeric value outside the range that can be represented by a given integer type.

C integers are stored in fixed-size memory (e.g., 4 bytes for int), so they can only represent values within a specific range.

When you exceed that range, the extra value wraps around due to binary overflow.



------------------------------------------------------------


Section 1-

Part 1-

variables - variables are named storage locations for data. You must declare a variable before using it, specifying its type and optionally an initial value.


%d and %i are format specifiers to print a integer.

%f for float, %s for string, %c for char, %i for bool.

escape sequences -

\n	Newline
\t	Horizontal tab
\\	Backslash (\)
\'	Single quote (')
\"	Double quote (")
\r	Carriage return
\b	Backspace
\f	Form feed
\a	Alert (beep)
\v	Vertical tab
\0	Null character

Part 2- loops and conditions

if, else, else if are used for controling the flow of eexecution as per the conditions.

loops are used for repetition  of blocks.

types of loops- for, while,do- while.

example of while loop-

int i = 0;
while(i<2){
printf("%d\n",i);
i = i+1;
}

example of for loop-

for(int i=0; i<2; i++){
printf("%d\n",i);
}


Example of code for creating a left aligned pyramid like structure of "#"

#include<stdio.h>


void print_row(int bricks){

for(int i = 0; i<bricks;i++){
    printf("#");
}
printf("\n");
}



int main (void) {

int height;

printf("What is the height of pyramid: ");
scanf("%d",&height);

for(int i=0; i<=height;i++){
print_row(i);
}
}

--------------------------------------------------------------

data types and variables-

1. int - used for variables that will store integers. it takes 4 bytes of memory(32bits). This means the range of values they can store is necessarily limited to 32 bits worth of information.

2. unsigned int- is a qualifier that can be applied to a certain types,which effectively doubles the positive range of variables of that type, at the cost of disallowing any negative values.

3.char- used for variables that will store single characters.it takes 1 byte of memory(8 bits).

4.float - floating point numbers are also known as real numbers.
They're basically numbers that have a decimal point in them.
Floating point values like integers are also
contained within 4 bytes of memory(32 bits).

5.Double - The double data type is used for variables that will
store floating-point values, also known as real numbers.
● The difference is that doubles are double precision. They
always take up 8 bytes of memory (64 bits).
● With an additional 32 bits of precision relative to a
float, doubles allow us to be specify much more
precise real numbers.


6.Void -Is a type, but not a data type.
Functions can have a void return type, which just
means they don’t return a value.
The parameter list of a function can also be void. It
simply means the function takes no parameters.

7.bool -  The bool data type is used for variables that will store a
Boolean value. More precisely, they are capable only of
storing one of two values: true and false.

8.Strings - The string data type is used for variables that will
store a series of characters, which programmers typically
call a string.Strings include things such as words, sentences,
paragraphs.

---------------------------------------------------------------

Conditionals

Conditional expressions allow your programs to
make decisions and take different forks in the road,
depending on the values of variables or user input.

1.If 
if (boolean-expression)
{
}
• If the boolean-expression evaluates to true, all lines
of code between the curly braces will execute in order from
top-to-bottom.
• If the boolean-expression evaluates to false, those
lines of code will not execute.

2.if else

if (boolean-expression)
{
}
else
{
}
• If the boolean-expression evaluates to true, all lines
of code between the first set of curly braces will execute in
order from top-to-bottom.
• If the boolean-expression evaluates to false, all lines
of code between the second set of curly braces will execute
in order from top-to-bottom

3.Switch 

C’s switch() statement is a
conditional statement that permits
enumeration of discrete cases,
instead of relying on Boolean
expressions.
• It’s important to break; between
each case, or you will “fall through”
each case (unless that is desired
behavior).

example of switch case-
int x = GetInt();
switch(x)
{
case 1:
printf(“One!\n”);
break;
case 2:
printf(“Two!\n”);
break;
case 3:
printf(“Three!\n”);
break;
default:
printf(“Sorry!\n”);
}


if (and if-else, and if-else if-…-else)
 Use Boolean expressions to make decisions.
switch - Use discrete cases to make decisions.
?: - Use to replace a very simple if-else to make your
code look fancy.


ternary operator- 

int x;
if (expr)
{
x = 5;
}
else
{
x = 6;
}
int x = (expr) ? 5 : 6;
• These two snippets of code act identically.
• The ternary operator (?:) is useful for writing trivially short conditional branches.

from above example If the expression is true then it will assign value 5 else it will assign value 6.

--------------------------------------------------------------------

Loops-

1. while (true)
   {
   }
• This is what we call an infinite loop. The lines of code
between the curly braces will execute repeatedly from top
to bottom, until and unless we break out of it (as with a
break; statement) or otherwise kill our program.

2.Loops
while (boolean-expr)
{
}
• If the boolean-expr evaluates to true, all lines of code
between the curly braces will execute repeatedly, in order
from top-to-bottom, until boolean-expr evaluates to
false.


3. do
{
}
while (boolean-expr);
• This loop will execute all lines of code between the curly braces once, and then, if the boolean-expr evaluates to true, will go back and repeat that process until boolean- expr evaluates to false.

4.Loops
for (start; expr; increment)
{
}

example- for (int i = 0; i < 10; i++)
{
}
• Syntactically unattractive, but for loops are used to repeat the
body of a loop a specified number of times, in this example 10.
• The process undertaken in a for loop is:
• The statement(s) in start are executed
• The expr is checked.
• If it evaluates to true, the body of the loop executes.
• If it evaluates to false, the body of the loop does not
execute.
• The statement(s) in increment are executed, and then
the expr is checked again, etc.

loops-
1.while-  Use when you want a loop to repeat an unknown number
of times, and possibly not at all.

2.do-while- Use when you want a loop to repeat an unknown number
of times, but at least once.

3.for- Use when you want a loop to repeat a discrete number of
times, though you may not know the number at the
moment the program is compiled.

-----------------------------------------------------------------
Linux Command Line-

1. ls -Short for “list”, this command will give you a readout of
all the files and folders in your current directory.


2. cd <directory> - Short for “change directory”, this command change your current directory to <directory>, which you specify,
in your workspace or on your operating system.
The shorthand name for the current directory is .
The shorthand name for the parent directory of the
current directory is ..
If ever curious about the name of the current directory,
though the terminal prompt will often tell you, you can
type pwd (present working directory).

3.mkdir <directory>
 Short for “make directory”, this command will create a
new subdirectory called <directory> located in the
current directory.

4.cp <source> <destination>
Short for “copy”, this command will allow you to create a
duplicate of the file you specify as <source>, which it
will save in <destination>.

If you wish to copy entire directories, you’ll need to
modify the command slightly:
cp –r <source directory> <destination directory>
The “-r” stands for recursive, and tells cp to dive down
into the directory and copy everything inside of it
(including any subdirectories it might contain).

5.rm <file>
 Short for “remove”, this command will delete <file>
after it asks you to confirm (y/n) you want to delete it.

You can skip the confirmation by typing:
rm –f <file>
But use at your own peril! There’s no undo.

To delete entire directories you need to use the –r flag,
just as was the case with cp.
rm –r <directory>

You can also combine the –r and –f flags into –rf.
Again, careful! There’s no undo!


6.mv <source> <destination>
 Short for “move”, this command will allow you to
effectively rename a file, moving it from <source> to
<destination>.



chmod	Change file permissions	example- chmod 755 file.txt	Sets read/write/execute permissions using octal codes

ln	Create file links (hard or symbolic) example-ln -s source.txt link.txt. Creates a symbolic (soft) link to a file

touch	Create or update file timestamps, example-touch newfile.txt	Creates an empty file or updates the modification time

rmdir	Remove empty directories example-rmdir foldername	Deletes a directory only if it's empty

man	View manual/help pages for commands. example- man ls	Displays detailed documentation for a command

diff	Compare two files line by line	example-diff file1.txt file2.txt	Shows differences between files

sudo	Run commands with superuser privileges	example-sudo apt update	Executes a command as root (or another user)

clear	Clear the terminal scree, Wipes the terminal display

telnet	Connect to remote hosts via TELNET	example- telnet example.com 80	Opens a TELNET connection (not secure; mostly deprecated)


-------------------------------------------------------------------

C provides a preprocessor directive (also called a
macro) for creating symbolic constants.
#define NAME REPLACEMENT
● At the time your program is compiled, #define
goes through your code and replaces NAME with
REPLACEMENT.
● If #include is similar to copy/paste, then #define is
analogous to find/replace.

example-
#define PI 3.14159265
At the time your program is compiled, #define
goes through your code and replaces PI with
3.14159265.


